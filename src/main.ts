import { app, BrowserWindow, ipcMain, IpcMainEvent, IpcMainInvokeEvent, Menu } from 'electron';

import { compileFile } from './main/compile';
import { discovery, initUsb } from './main/discovery';

// This allows TypeScript to pick up the magic constants that's auto-generated by Forge's Webpack
// plugin that tells the Electron app where to look for the Webpack-bundled app code (depending on
// whether you're running in development or production).
declare const MAIN_WINDOW_WEBPACK_ENTRY: string;
declare const MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY: string;

// Handle creating/removing shortcuts on Windows when installing/uninstalling.
if (require('electron-squirrel-startup')) {
    app.quit();
}

const createWindow = (): void => {
    // Create the browser window.
    const mainWindow = new BrowserWindow({
        width: 800,
        height: 600,
        webPreferences: {
            preload: MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY,
        },
    });

    discovery.on('bricks-changed', bricks => {
        mainWindow.webContents.send('bricks-changed', bricks)
    });

    const menu = Menu.buildFromTemplate([
        {
            label: app.name,
            submenu: [
                {
                    click: () => mainWindow.webContents.send('update-counter', 1),
                    label: 'Increment'
                },
                {
                    click: () => mainWindow.webContents.send('update-counter', -1),
                    label: 'Decrement'
                }
            ]
        }
    ]);

    //Menu.setApplicationMenu(menu)

    mainWindow.loadURL(MAIN_WINDOW_WEBPACK_ENTRY);
    mainWindow.webContents.openDevTools();
};

app.whenReady().then(() => {
    initUsb();

    createWindow();

    ipcMain.handle('compile-file', async (event: IpcMainInvokeEvent, source: string) => {
        const result = await compileFile(source);
        event.sender.send('compile-file-success', result);
    });

    ipcMain.on('button-pressed', (event: IpcMainEvent, value: number) => {
        event.returnValue = 2 * value;
    });
});

app.on('window-all-closed', () => {
    if (process.platform !== 'darwin') {
        app.quit();
    }
});

app.on('activate', () => {
    if (BrowserWindow.getAllWindows().length === 0) {
        createWindow();
    }
});
