import { app, BrowserWindow, ipcMain, IpcMainInvokeEvent, Menu } from 'electron'
import { usb } from 'usb'
import PubSub from 'pubsub-js'
import { withTempDir } from './main/temp'
import * as fs from 'node:fs/promises'
import * as path from 'node:path'
import * as child_process from 'node:child_process'
import * as util from 'node:util'

// This allows TypeScript to pick up the magic constants that's auto-generated by Forge's Webpack
// plugin that tells the Electron app where to look for the Webpack-bundled app code (depending on
// whether you're running in development or production).
declare const MAIN_WINDOW_WEBPACK_ENTRY: string
declare const MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY: string

// Handle creating/removing shortcuts on Windows when installing/uninstalling.
if (require('electron-squirrel-startup')) {
    app.quit()
}

const createWindow = (): void => {
    // Create the browser window.
    const mainWindow = new BrowserWindow({
        width: 800,
        height: 600,
        webPreferences: {
            preload: MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY,
        },
    })

    PubSub.subscribe('usb-changed-2', (_, data: { [key: number]: string }) => mainWindow.webContents.send('usb-changed', data))

    const menu = Menu.buildFromTemplate([
        {
            label: app.name,
            submenu: [
                {
                    click: () => mainWindow.webContents.send('update-counter', 1),
                    label: 'Increment'
                },
                {
                    click: () => mainWindow.webContents.send('update-counter', -1),
                    label: 'Decrement'
                }
            ]
        }
    ])

    //Menu.setApplicationMenu(menu)

    // and load the index.html of the app.
    mainWindow.loadURL(MAIN_WINDOW_WEBPACK_ENTRY)

    // Open the DevTools.
    mainWindow.webContents.openDevTools()
}

async function compileFile(source: string): Promise<boolean> {
    return await withTempDir(async (dir): Promise<boolean> => {
        const sourceFile = path.join(dir, "program.nxc")
        const rxeFile = path.join(dir, "program.rxe")
        await fs.writeFile(sourceFile, source)
        console.log("Wrote " + sourceFile)

        const execFile = util.promisify(child_process.execFile)

        const { stdout, stderr } = await execFile("/Users/christian/src/BricxCommandCenter/NXT/nbc",
            ["-T=NXT", "-EF", "-O=" + rxeFile, "-Z6", sourceFile]
        )

        console.error(stderr)
        console.log(stdout)

        return true
    })
}

// This method will be called when Electron has finished
// initialization and is ready to create browser windows.
// Some APIs can only be used after this event occurs.
app.on('ready', () => {
    createWindow()

    ipcMain.handle('compile-file', async (event: IpcMainInvokeEvent, source: string) => {
        const result = await compileFile(source)
        event.sender.send('compile-file-success', result)
    })
})

// Quit when all windows are closed, except on macOS. There, it's common
// for applications and their menu bar to stay active until the user quits
// explicitly with Cmd + Q.
app.on('window-all-closed', () => {
    if (process.platform !== 'darwin') {
        app.quit()
    }
})

app.on('activate', () => {
    // On OS X it's common to re-create a window in the app when the
    // dock icon is clicked and there are no other windows open.
    if (BrowserWindow.getAllWindows().length === 0) {
        createWindow()
    }
})

// In this file you can include the rest of your app's specific main process
// code. You can also put them in separate files and import them here.

const usbDevices: { [key: number]: string } = {}

usb.on('attach', (dev) => {
    const id = dev.deviceDescriptor.iSerialNumber
    dev.open()
    dev.getStringDescriptor(id, (_, value) => {
        usbDevices[dev.deviceAddress] = value ?? "?"
        PubSub.publish('usb-changed-2', usbDevices)
        dev.close()
    })
})

usb.on('detach', (dev) => {
    delete usbDevices[dev.deviceAddress]
    PubSub.publish('usb-changed-2', usbDevices)
})
